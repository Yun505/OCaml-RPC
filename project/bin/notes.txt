let rec f x = ... for recursive functions

OCaml supports labeled arguments to functions. You can declare this kind of function using the following syntax:
let f ~name1:arg1 ~name2:arg2 = arg1 + arg2;;

2.6:
we can use ignore function to legit ignore 
let print_stat name num =
  Printf.printf "%s: %F\n%!" name num
    - debugging:
            (* possibility 1 *)
        let random_int bound =
        assert (bound > 0 && bound < 1 lsl 30);
        (* proceed with the implementation of the function *)

        (* possibility 2 *)
        let random_int bound =
        if not (bound > 0 && bound < 1 lsl 30)
        then invalid_arg "bound";
        (* proceed with the implementation of the function *)

        (* possibility 3 *)
        let random_int bound =
        if not (bound > 0 && bound < 1 lsl 30)
        then failwith "bound";
        (* proceed with the implementation of the function *)